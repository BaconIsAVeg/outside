[bump]
features_always_bump_minor = false

[changelog]
footer = ""
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
      * {{ commit.message | split(pat="\n") | first | trim }}\
        {% if commit.remote.username %} by @{{ commit.remote.username }}{%- endif %}\
        {% if commit.remote.pr_number %} in #{{ commit.remote.pr_number }}{%- endif %}
    {%- endfor -%}
{% endfor %}\n
"""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove PR labels from commits
  { pattern = '\(#([0-9]+)\)', replace = "" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = '^chore', skip = true },
  { message = '^Release', skip = true },
  { message = "^Merge commit", skip = true },
  { message = '^(chore|fix)\(deps\):', group = "<!-- 99 -->📦️ Dependency Updates", scope = "" },
  { message = '^(chore|fix)\(security\):', group = "<!-- 08 -->🛡️ Security" },
  { message = '^feat', group = "<!-- 00 -->🚀 Features" },
  { message = '^fix', group = "<!-- 01 -->🐛 Bug Fixes" },
  { message = '^refactor', group = "<!-- 02 -->🚜 Refactor" },
  { message = '^doc', group = "<!-- 03 -->📚 Documentation" },
  { message = '^style', group = "<!-- 05 -->🎨 Styling" },
  { message = '^perf', group = "<!-- 04 -->⚡ Performance" },
  { message = '^test', group = "<!-- 06 -->🧪 Testing" },
  { message = '^revert', group = "<!-- 09 -->◀️ Revert" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
tag_pattern = '^v\d+\.\d+\.\d+$'
# regex for skipping tags
skip_tags = '^v(1|2023|2024\.0|2024\.11\.27)'
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42
